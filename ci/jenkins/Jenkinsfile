pipeline {
    agent any
    parameters {
        string(name: 'api', defaultValue: 'http://', description: 'Api url')
    }
    environment {
        NODE_ENV = "production"
    }
    stages {
        stage('Build in Docker') {
            steps {
                script{
                    docker.image('node:12-stretch').withRun('-u 0:0') {c ->
                      sh 'ng --version'
                    }
                }
            }
        }
        stage('Check environment') {
            steps {
                sh 'pwd'
                sh 'node --version'
                sh 'npm --version'
                sh 'ng --version'
                sh "echo ${params.api} > 1.txt"
                sh "cat 1.txt"
            }
        }
        stage('Install dependencies') {
            steps {
                // check cloud storage
                // check missing
                sh 'npm i @angular-devkit/build-angular'
                sh 'npm install'
            }
        }
        stage('Static checks') {
            parallel {
                 stage('Audit dependencies') {
                     steps {
                        // check changed
                         sh 'npm audit'
                     }
                 }
                 stage('Code style checks') {
                     steps {
                         sh 'npm run lint-ci'
                     }
                 }
                 stage('Run unit tests') {
                     steps {
                         sh 'npm run test-ci'
                     }
                     post {
                         always {
                             junit 'coverage/ecommerce-platform/junit/junit.xml'
                             cobertura coberturaReportFile: 'coverage/ecommerce-platform/cobertura-coverage.xml', conditionalCoverageTargets: '20, 0, 0', lineCoverageTargets: '20, 0, 0', methodCoverageTargets: '20, 0, 0', fileCoverageTargets: '20, 0, 0', autoUpdateHealth: false, autoUpdateStability: false
                         }
                     }
                 }
            }
        }
        stage('Build') {
            steps {
                sh 'npm run build-ci'
            }
        }
        stage('Publish artifacts') {
            steps {
              // version folder/zip
              sh 'tar -czvf dist-${BUILD_NUMBER}.tar.gz dist/ecommerce-platform'
            }
        }
    }
    post {
        success {
            script {
                sh 'echo SUCCESS'
            }
        }
        failure {
            script {
                sh 'echo FAILURE'
            }
        }
        always {
            deleteDir()
        }
    }
}
